// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
	"stb-library/app/storage/internal/biz"
	"stb-library/app/storage/internal/conf"
	"stb-library/app/storage/internal/data"
	"stb-library/app/storage/internal/server"
	"stb-library/app/storage/internal/sgin"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	engine := sgin.NewGinEngine()
	httpServer := server.NewHTTPServer(confServer, engine, logger)
	defaultFileDir, err := sgin.ConstructorDefaultDir()
	if err != nil {
		return nil, nil, err
	}
	formatConversionUseCase := biz.NewExportCase(defaultFileDir, logger)
	comparisonUseCase := biz.NewFileComparisonCase(defaultFileDir, logger)
	transformUseCase := biz.NewTransformCase(defaultFileDir, logger)
	imageWordUseCase := biz.NewImageToWordCase(defaultFileDir, logger)
	discovery := data.NewDiscovery(registry)
	centralClient := data.NewCentralGrpcClient(discovery, tracerProvider)
	dataData, cleanup, err := data.NewData(confData, logger, centralClient)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	qrcodeUseCase := biz.NewQrcodeCase(userRepo, logger)
	userUseCase := biz.NewUserCase(userRepo, logger)
	centralRepo := data.NewCentralRepo(dataData, logger)
	centralUseCase := biz.NewCentralUseCase(centralRepo, logger)
	sginSgin := sgin.NewSgin(defaultFileDir, engine, logger, formatConversionUseCase, comparisonUseCase, transformUseCase, imageWordUseCase, qrcodeUseCase, userUseCase, centralUseCase)
	grpcServer := server.NewGRPCServer(confServer, logger, tracerProvider, sginSgin)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
