// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: api/base/v1/err.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Err_CreateErr_FullMethodName = "/api.base.v1.Err/CreateErr"
	Err_UpdateErr_FullMethodName = "/api.base.v1.Err/UpdateErr"
	Err_DeleteErr_FullMethodName = "/api.base.v1.Err/DeleteErr"
	Err_GetErr_FullMethodName    = "/api.base.v1.Err/GetErr"
	Err_ListErr_FullMethodName   = "/api.base.v1.Err/ListErr"
)

// ErrClient is the client API for Err service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrClient interface {
	CreateErr(ctx context.Context, in *CreateErrRequest, opts ...grpc.CallOption) (*CreateErrReply, error)
	UpdateErr(ctx context.Context, in *UpdateErrRequest, opts ...grpc.CallOption) (*UpdateErrReply, error)
	DeleteErr(ctx context.Context, in *DeleteErrRequest, opts ...grpc.CallOption) (*DeleteErrReply, error)
	GetErr(ctx context.Context, in *GetErrRequest, opts ...grpc.CallOption) (*GetErrReply, error)
	ListErr(ctx context.Context, in *ListErrRequest, opts ...grpc.CallOption) (*ListErrReply, error)
}

type errClient struct {
	cc grpc.ClientConnInterface
}

func NewErrClient(cc grpc.ClientConnInterface) ErrClient {
	return &errClient{cc}
}

func (c *errClient) CreateErr(ctx context.Context, in *CreateErrRequest, opts ...grpc.CallOption) (*CreateErrReply, error) {
	out := new(CreateErrReply)
	err := c.cc.Invoke(ctx, Err_CreateErr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errClient) UpdateErr(ctx context.Context, in *UpdateErrRequest, opts ...grpc.CallOption) (*UpdateErrReply, error) {
	out := new(UpdateErrReply)
	err := c.cc.Invoke(ctx, Err_UpdateErr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errClient) DeleteErr(ctx context.Context, in *DeleteErrRequest, opts ...grpc.CallOption) (*DeleteErrReply, error) {
	out := new(DeleteErrReply)
	err := c.cc.Invoke(ctx, Err_DeleteErr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errClient) GetErr(ctx context.Context, in *GetErrRequest, opts ...grpc.CallOption) (*GetErrReply, error) {
	out := new(GetErrReply)
	err := c.cc.Invoke(ctx, Err_GetErr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errClient) ListErr(ctx context.Context, in *ListErrRequest, opts ...grpc.CallOption) (*ListErrReply, error) {
	out := new(ListErrReply)
	err := c.cc.Invoke(ctx, Err_ListErr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrServer is the server API for Err service.
// All implementations must embed UnimplementedErrServer
// for forward compatibility
type ErrServer interface {
	CreateErr(context.Context, *CreateErrRequest) (*CreateErrReply, error)
	UpdateErr(context.Context, *UpdateErrRequest) (*UpdateErrReply, error)
	DeleteErr(context.Context, *DeleteErrRequest) (*DeleteErrReply, error)
	GetErr(context.Context, *GetErrRequest) (*GetErrReply, error)
	ListErr(context.Context, *ListErrRequest) (*ListErrReply, error)
	mustEmbedUnimplementedErrServer()
}

// UnimplementedErrServer must be embedded to have forward compatible implementations.
type UnimplementedErrServer struct {
}

func (UnimplementedErrServer) CreateErr(context.Context, *CreateErrRequest) (*CreateErrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateErr not implemented")
}
func (UnimplementedErrServer) UpdateErr(context.Context, *UpdateErrRequest) (*UpdateErrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErr not implemented")
}
func (UnimplementedErrServer) DeleteErr(context.Context, *DeleteErrRequest) (*DeleteErrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteErr not implemented")
}
func (UnimplementedErrServer) GetErr(context.Context, *GetErrRequest) (*GetErrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErr not implemented")
}
func (UnimplementedErrServer) ListErr(context.Context, *ListErrRequest) (*ListErrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErr not implemented")
}
func (UnimplementedErrServer) mustEmbedUnimplementedErrServer() {}

// UnsafeErrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrServer will
// result in compilation errors.
type UnsafeErrServer interface {
	mustEmbedUnimplementedErrServer()
}

func RegisterErrServer(s grpc.ServiceRegistrar, srv ErrServer) {
	s.RegisterService(&Err_ServiceDesc, srv)
}

func _Err_CreateErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrServer).CreateErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Err_CreateErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrServer).CreateErr(ctx, req.(*CreateErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Err_UpdateErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrServer).UpdateErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Err_UpdateErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrServer).UpdateErr(ctx, req.(*UpdateErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Err_DeleteErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrServer).DeleteErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Err_DeleteErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrServer).DeleteErr(ctx, req.(*DeleteErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Err_GetErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrServer).GetErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Err_GetErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrServer).GetErr(ctx, req.(*GetErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Err_ListErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrServer).ListErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Err_ListErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrServer).ListErr(ctx, req.(*ListErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Err_ServiceDesc is the grpc.ServiceDesc for Err service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Err_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.base.v1.Err",
	HandlerType: (*ErrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateErr",
			Handler:    _Err_CreateErr_Handler,
		},
		{
			MethodName: "UpdateErr",
			Handler:    _Err_UpdateErr_Handler,
		},
		{
			MethodName: "DeleteErr",
			Handler:    _Err_DeleteErr_Handler,
		},
		{
			MethodName: "GetErr",
			Handler:    _Err_GetErr_Handler,
		},
		{
			MethodName: "ListErr",
			Handler:    _Err_ListErr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/base/v1/err.proto",
}
