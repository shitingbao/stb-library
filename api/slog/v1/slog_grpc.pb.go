// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServerClient is the client API for LogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServerClient interface {
	SendOneLog(ctx context.Context, in *RequestLogMessages, opts ...grpc.CallOption) (*RespondLogRes, error)
	SendManyIdenticalLog(ctx context.Context, in *RequestLogIdenticalMessageList, opts ...grpc.CallOption) (*RespondLogRes, error)
	SendManyDifferentLog(ctx context.Context, in *RequestLogDifferentMessageList, opts ...grpc.CallOption) (*RespondLogRes, error)
	LogFind(ctx context.Context, in *RequestLogFindParam, opts ...grpc.CallOption) (*RespondLogFindList, error)
}

type logServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServerClient(cc grpc.ClientConnInterface) LogServerClient {
	return &logServerClient{cc}
}

func (c *logServerClient) SendOneLog(ctx context.Context, in *RequestLogMessages, opts ...grpc.CallOption) (*RespondLogRes, error) {
	out := new(RespondLogRes)
	err := c.cc.Invoke(ctx, "/wone_logger.server.v1.LogServer/SendOneLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) SendManyIdenticalLog(ctx context.Context, in *RequestLogIdenticalMessageList, opts ...grpc.CallOption) (*RespondLogRes, error) {
	out := new(RespondLogRes)
	err := c.cc.Invoke(ctx, "/wone_logger.server.v1.LogServer/SendManyIdenticalLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) SendManyDifferentLog(ctx context.Context, in *RequestLogDifferentMessageList, opts ...grpc.CallOption) (*RespondLogRes, error) {
	out := new(RespondLogRes)
	err := c.cc.Invoke(ctx, "/wone_logger.server.v1.LogServer/SendManyDifferentLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) LogFind(ctx context.Context, in *RequestLogFindParam, opts ...grpc.CallOption) (*RespondLogFindList, error) {
	out := new(RespondLogFindList)
	err := c.cc.Invoke(ctx, "/wone_logger.server.v1.LogServer/LogFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServerServer is the server API for LogServer service.
// All implementations must embed UnimplementedLogServerServer
// for forward compatibility
type LogServerServer interface {
	SendOneLog(context.Context, *RequestLogMessages) (*RespondLogRes, error)
	SendManyIdenticalLog(context.Context, *RequestLogIdenticalMessageList) (*RespondLogRes, error)
	SendManyDifferentLog(context.Context, *RequestLogDifferentMessageList) (*RespondLogRes, error)
	LogFind(context.Context, *RequestLogFindParam) (*RespondLogFindList, error)
	mustEmbedUnimplementedLogServerServer()
}

// UnimplementedLogServerServer must be embedded to have forward compatible implementations.
type UnimplementedLogServerServer struct {
}

func (UnimplementedLogServerServer) SendOneLog(context.Context, *RequestLogMessages) (*RespondLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOneLog not implemented")
}
func (UnimplementedLogServerServer) SendManyIdenticalLog(context.Context, *RequestLogIdenticalMessageList) (*RespondLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendManyIdenticalLog not implemented")
}
func (UnimplementedLogServerServer) SendManyDifferentLog(context.Context, *RequestLogDifferentMessageList) (*RespondLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendManyDifferentLog not implemented")
}
func (UnimplementedLogServerServer) LogFind(context.Context, *RequestLogFindParam) (*RespondLogFindList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFind not implemented")
}
func (UnimplementedLogServerServer) mustEmbedUnimplementedLogServerServer() {}

// UnsafeLogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServerServer will
// result in compilation errors.
type UnsafeLogServerServer interface {
	mustEmbedUnimplementedLogServerServer()
}

func RegisterLogServerServer(s grpc.ServiceRegistrar, srv LogServerServer) {
	s.RegisterService(&LogServer_ServiceDesc, srv)
}

func _LogServer_SendOneLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).SendOneLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wone_logger.server.v1.LogServer/SendOneLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).SendOneLog(ctx, req.(*RequestLogMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_SendManyIdenticalLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogIdenticalMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).SendManyIdenticalLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wone_logger.server.v1.LogServer/SendManyIdenticalLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).SendManyIdenticalLog(ctx, req.(*RequestLogIdenticalMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_SendManyDifferentLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogDifferentMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).SendManyDifferentLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wone_logger.server.v1.LogServer/SendManyDifferentLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).SendManyDifferentLog(ctx, req.(*RequestLogDifferentMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_LogFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogFindParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).LogFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wone_logger.server.v1.LogServer/LogFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).LogFind(ctx, req.(*RequestLogFindParam))
	}
	return interceptor(ctx, in, info, handler)
}

// LogServer_ServiceDesc is the grpc.ServiceDesc for LogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wone_logger.server.v1.LogServer",
	HandlerType: (*LogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOneLog",
			Handler:    _LogServer_SendOneLog_Handler,
		},
		{
			MethodName: "SendManyIdenticalLog",
			Handler:    _LogServer_SendManyIdenticalLog_Handler,
		},
		{
			MethodName: "SendManyDifferentLog",
			Handler:    _LogServer_SendManyDifferentLog_Handler,
		},
		{
			MethodName: "LogFind",
			Handler:    _LogServer_LogFind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/slog/v1/slog.proto",
}
